[GlossarySettings]
# This is the root of the glossary folder
# This is only a default. If no NodeID is specified as second parameter, this ID will be used
DefaultGlossaryNodeID=2
FolderClassID=1

# These sections are glossary-enabled.
# This setting will have to be checked in the templates like this:
# {let enabled=ezini("GlossarySettings", "GlossarySections", "glossary.ini")
#      sectionid=$content_object.section_id}
#
# {section name=Enabled loop=$enabled}
#  {switch match=$Enabled:item}
#    {case match=$sectionid}
#      {* code to do when current section is glossary-enabled *}
#    {/case}
#    
#    {case}
#      {* code to do when current section is NOT glossary enabled *}
#    {/case}
#  {/switch}
#{/section}
#{/let}
GlossarySections[]
GlossarySections[]=1

# Which tags should NOT (!!) be replaced by the glossary.
# Use this to avoid broken links if a glossary term is inside a tag
IgnoreTags[]
IgnoreTags[]=a
IgnoreTags[]=link
IgnoreTags[]=object

# In special cases, there could be glossary words that are very similar except for the last final characters
# These settings provide the operator with a list of possible non-word terminators
# The characters specified here will not act as a word separator if:
# - they're directly behind the search word
# - they're immediately followed by a "word char" (which is defined by the regexp lib)
PossibleExceptions[]
PossibleExceptions[]=.
PossibleExceptions[]=\
PossibleExceptions[]=/
PossibleExceptions[]=:
PossibleExceptions[]=-


[ShortAttributes]
# This section lists the attributes of objects that contain the "Short description"
# Use like this: ShortAttributes[<ClassID>]=<attribute name>
ShortAttributes[]
ShortAttributes[2]=intro
ShortAttributes[7]=message

[NameAttributes]
# A list of the attributes that are used to find glossary terms in a text
# Use the format: NameAttributes[<ClassID>]=<attribute_name>
NameAttributes[]
NameAttributes[2]=title
